{"ast":null,"code":"class MockAPI {\n  constructor() {}\n\n  async registerUser(user) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let users = localStorage.getItem(\"users\");\n\n        if (typeof users !== \"string\") {\n          users = \"{}\";\n        }\n\n        users = JSON.parse(users);\n\n        if (user.email in users) {\n          reject(\"Email já em uso!\");\n        } else {\n          users[user.email] = user;\n          localStorage.setItem(\"users\", JSON.stringify(users));\n          resolve(\"\");\n        }\n      }, 300);\n    });\n  }\n\n  async authUser(email, passwd) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let users = localStorage.getItem(\"users\");\n\n        if (typeof users !== \"string\") {\n          users = \"{}\";\n        }\n\n        users = JSON.parse(users);\n\n        if (email in users && passwd === users[email].password) {\n          resolve(\"\");\n        } else {\n          reject(\"\");\n        }\n      }, 300);\n    });\n  }\n\n}\n\nconst mockAPI = new MockAPI();\nexport default mockAPI;","map":{"version":3,"names":["MockAPI","constructor","registerUser","user","Promise","resolve","reject","setTimeout","users","localStorage","getItem","JSON","parse","email","setItem","stringify","authUser","passwd","password","mockAPI"],"sources":["/home/pedromonici/USP/Quinto_Semestre/WEB/Projeto/Good-Glasses/good-glasses-2/src/API_middlewares/mock.js"],"sourcesContent":["class MockAPI {\n\tconstructor() {};\n\n\tasync registerUser(user) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tlet users = localStorage.getItem(\"users\");\n\t\t\t\tif (typeof users !== \"string\") {\n\t\t\t\t\tusers = \"{}\";\n\t\t\t\t}\n\t\t\t\tusers = JSON.parse(users);\n\t\t\t\tif (user.email in users) {\n\t\t\t\t\treject(\"Email já em uso!\");\n\t\t\t\t} else {\n\t\t\t\t\tusers[user.email] = user;\n\t\t\t\t\tlocalStorage.setItem(\"users\", JSON.stringify(users));\n\t\t\t\t\tresolve(\"\");\n\t\t\t\t}\n\t\t\t}, 300);\n\t\t});\n\t};\n\n\tasync authUser(email, passwd) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tlet users = localStorage.getItem(\"users\");\n\t\t\t\tif (typeof users !== \"string\") {\n\t\t\t\t\tusers = \"{}\";\n\t\t\t\t}\n\t\t\t\tusers = JSON.parse(users);\n\t\t\t\tif (email in users && passwd === users[email].password) {\n\t\t\t\t\tresolve(\"\");\n\t\t\t\t} else {\n\t\t\t\t\treject(\"\");\n\t\t\t\t}\n\t\t\t}, 300);\n\t\t});\n\t};\n\n}\nconst mockAPI = new MockAPI();\n\nexport default mockAPI;"],"mappings":"AAAA,MAAMA,OAAN,CAAc;EACbC,WAAW,GAAG,CAAE;;EAEE,MAAZC,YAAY,CAACC,IAAD,EAAO;IACxB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACvCC,UAAU,CAAC,MAAM;QAChB,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;QACA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;UAC9BA,KAAK,GAAG,IAAR;QACA;;QACDA,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAR;;QACA,IAAIL,IAAI,CAACU,KAAL,IAAcL,KAAlB,EAAyB;UACxBF,MAAM,CAAC,kBAAD,CAAN;QACA,CAFD,MAEO;UACNE,KAAK,CAACL,IAAI,CAACU,KAAN,CAAL,GAAoBV,IAApB;UACAM,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8BH,IAAI,CAACI,SAAL,CAAeP,KAAf,CAA9B;UACAH,OAAO,CAAC,EAAD,CAAP;QACA;MACD,CAbS,EAaP,GAbO,CAAV;IAcA,CAfM,CAAP;EAgBA;;EAEa,MAARW,QAAQ,CAACH,KAAD,EAAQI,MAAR,EAAgB;IAC7B,OAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACvCC,UAAU,CAAC,MAAM;QAChB,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;QACA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;UAC9BA,KAAK,GAAG,IAAR;QACA;;QACDA,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAR;;QACA,IAAIK,KAAK,IAAIL,KAAT,IAAkBS,MAAM,KAAKT,KAAK,CAACK,KAAD,CAAL,CAAaK,QAA9C,EAAwD;UACvDb,OAAO,CAAC,EAAD,CAAP;QACA,CAFD,MAEO;UACNC,MAAM,CAAC,EAAD,CAAN;QACA;MACD,CAXS,EAWP,GAXO,CAAV;IAYA,CAbM,CAAP;EAcA;;AArCY;;AAwCd,MAAMa,OAAO,GAAG,IAAInB,OAAJ,EAAhB;AAEA,eAAemB,OAAf"},"metadata":{},"sourceType":"module"}