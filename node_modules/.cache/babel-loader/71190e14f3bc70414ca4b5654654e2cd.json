{"ast":null,"code":"class MockAPI {\n  constructor() {}\n\n  async registerUser(user) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let users = localStorage.getItem(\"users\");\n\n        if (typeof users !== \"string\") {\n          users = \"{}\";\n        }\n\n        users = JSON.parse(users);\n\n        if (user.email in users) {\n          console.log(user);\n          reject(\"Email já em uso!\");\n        } else {\n          users[user.email] = user;\n          localStorage.setItem(\"users\", JSON.stringify(users));\n          resolve(\"\");\n        }\n      }, 300);\n    });\n  }\n\n  authUser(email, passwd) {\n    let users = localStorage.getItem(\"users\");\n\n    if (typeof users !== \"string\") {\n      users = \"{}\";\n    }\n\n    users = JSON.parse(users);\n    return email in users && passwd === users[email].passwd;\n  }\n\n}\n\nconst mockAPI = new MockAPI();\nexport default mockAPI;","map":{"version":3,"names":["MockAPI","constructor","registerUser","user","Promise","resolve","reject","setTimeout","users","localStorage","getItem","JSON","parse","email","console","log","setItem","stringify","authUser","passwd","mockAPI"],"sources":["/home/pedromonici/USP/Quinto_Semestre/WEB/Projeto/Good-Glasses/good-glasses-2/src/API_middlewares/mock.js"],"sourcesContent":["class MockAPI {\n\tconstructor() {};\n\n\tasync registerUser(user) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tlet users = localStorage.getItem(\"users\");\n\t\t\t\tif (typeof users !== \"string\") {\n\t\t\t\t\tusers = \"{}\";\n\t\t\t\t}\n\t\t\t\tusers = JSON.parse(users);\n\t\t\t\tif (user.email in users) {\n\t\t\t\t\tconsole.log(user)\n\t\t\t\t\treject(\"Email já em uso!\");\n\t\t\t\t} else {\n\t\t\t\t\tusers[user.email] = user;\n\t\t\t\t\tlocalStorage.setItem(\"users\", JSON.stringify(users));\n\t\t\t\t\tresolve(\"\");\n\t\t\t\t}\n\t\t\t}, 300);\n\t\t});\n\t};\n\n\tauthUser(email, passwd) {\n\t\tlet users = localStorage.getItem(\"users\");\n\t\tif (typeof users !== \"string\") {\n\t\t\tusers = \"{}\";\n\t\t}\n\t\tusers = JSON.parse(users);\n\n\t\treturn email in users && passwd === users[email].passwd;\n\t};\n\n}\nconst mockAPI = new MockAPI();\n\nexport default mockAPI;"],"mappings":"AAAA,MAAMA,OAAN,CAAc;EACbC,WAAW,GAAG,CAAE;;EAEE,MAAZC,YAAY,CAACC,IAAD,EAAO;IACxB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACvCC,UAAU,CAAC,MAAM;QAChB,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;QACA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;UAC9BA,KAAK,GAAG,IAAR;QACA;;QACDA,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAR;;QACA,IAAIL,IAAI,CAACU,KAAL,IAAcL,KAAlB,EAAyB;UACxBM,OAAO,CAACC,GAAR,CAAYZ,IAAZ;UACAG,MAAM,CAAC,kBAAD,CAAN;QACA,CAHD,MAGO;UACNE,KAAK,CAACL,IAAI,CAACU,KAAN,CAAL,GAAoBV,IAApB;UACAM,YAAY,CAACO,OAAb,CAAqB,OAArB,EAA8BL,IAAI,CAACM,SAAL,CAAeT,KAAf,CAA9B;UACAH,OAAO,CAAC,EAAD,CAAP;QACA;MACD,CAdS,EAcP,GAdO,CAAV;IAeA,CAhBM,CAAP;EAiBA;;EAEDa,QAAQ,CAACL,KAAD,EAAQM,MAAR,EAAgB;IACvB,IAAIX,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;IACA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;MAC9BA,KAAK,GAAG,IAAR;IACA;;IACDA,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAR;IAEA,OAAOK,KAAK,IAAIL,KAAT,IAAkBW,MAAM,KAAKX,KAAK,CAACK,KAAD,CAAL,CAAaM,MAAjD;EACA;;AA/BY;;AAkCd,MAAMC,OAAO,GAAG,IAAIpB,OAAJ,EAAhB;AAEA,eAAeoB,OAAf"},"metadata":{},"sourceType":"module"}